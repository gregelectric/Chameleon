;------------------------------------------------------------------------------
;   FILENAME:   FlashBlock.inc
;   Version: 1.50, Updated on 2011/6/28 at 6:8:6
;   Generated by PSoC Designer 5.4.2946
;------------------------------------------------------------------------------
;   DESCRIPTION:
;   FlashBlock library routine include file.
;
;   Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
;
;------------------------------------------------------------------------------
;   FUNCTION NAME: bFlashWriteBlock
;
;   DESCRIPTION:
;   Writes 64 bytes of data to the flash at the specified blockId.
;
;   Regardless of the size of the buffer, this routine always writes 64
;   bytes of data. If the buffer is less than 64 bytes, then the next
;   64-N bytes of data will be written to fill the rest of flash block data.
;
;   ARGUMENTS:
;   FLASH_WRITE_STRUCT *  psBlockWriteData
;
;   pointer to a structure that holds the calling arguments and some reserved
;   space for temporary local variables.
;
;   A = MSB of pointer
;   X = LSB of pointer
;
;   1) ALLOCATE the structure and set the X pointer to the first location
;   in the structure.  Note that this structure can be allocated on the stack.
;   2) Set the first three stucture elements with the required data: block ID,
;   flash buffer pointer, and temperature.
;   3) call this routine.
;   4) Restore stack if necessary
;
;   RETURNS: in Accumuator
;   BYTE - successful if NON-Zero returned.
;
;   SIDE EFFECTS:
;   1) CPU clock temporarily set to 12MHz during call.
;
;---------------------------------------------------------------------------


USB_ICE_Flash_ops: equ          1h
USB_ALLOW_SSC:     equ          USB_ICE_Flash_ops & 0x01		
                                ; control execution of SSC (and associated code) for debug
                                ; When debugging with the ICE the execution of an SSC results in a disabled and reset USB SIE.
								; (memo's have been written).  For debug with ICE, don't do the actual SSC but do everything else.
								 
TEMPERATURE: 		EQU ((14h)&(0xff))		; constant temp define for flash write



;-----------------------------------------------------------------------------
; Definition of FLASH_WRITE_STRUCT:

wARG_BlockId:              equ      0        ; block ID
pARG_FlashBuffer:          equ      2        ; flash buffer pointer - 2 bytes
cARG_Temperature:          equ      4        ; flash Tempurature
bDATA_PWErase:             equ      5        ; temporary storage (reserved)
bDATA_PWProgram:           equ      6        ; temporary storage (reserved)
bDATA_PWMultiplier:        equ      7        ; temporary storage (reserved)

FLASH_WRITE_STRUCT_SIZE:   equ      8        ; Calling frame size


;------------------------------------------------------------------------------
;   FUNCTION NAME: FlashReadBlock
;
;   DESCRIPTION:
;   Reads a specified flash block to a buffer in RAM.
;
;   ARGUMENTS:
;   FLASH_READ_STRUCT *  psBlockReadData
;
;   pointer to a structure that holds the calling arguments and some reserved
;   space for temporary local variables.
;
;   A = MSB of pointer
;   X = LSB of pointer
;
;   1) ALLOCATE the structure and set the X pointer to the first location
;   in the structure.  Note that this structure can be allocated on the stack.
;   2) Set the first three stucture elements with the required data: block ID,
;   flash buffer pointer, and count.
;   3) call this routine.
;   4) Restore stack if necessary
;
;
;  RETURNS: void
;     Data read is returned at specified pFlashBuffer.
;
;  SIDE EFFECTS:
;     none.
;
;------------------------------------------------------------------------------
; Definition of FLASH_READ_STRUCT:

wARG_BlockId:              equ      0        ; block ID
pARG_FlashBuffer:          equ      2        ; flash buffer pointer - 2 bytes
wARG_ReadCount:            equ      4        ; Read count - 2 bytes

FLASH_READ_STRUCT_SIZE:    equ      6        ; Calling frame size

;---------------------
;  End of File
;---------------------

