;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: USBCommon.asm
;;  Version: 1.50, Updated on 2011/6/28 at 6:8:6
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: USB Device User Module software implementation file
;;
;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API functions
;;        returns. For Large Memory Model devices it is also the caller's 
;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
;;        MVW_PP registers. Even though some of these registers may not be modified
;;        now, there is no guarantee that will remain the case in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
include "USB.inc"

;-----------------------------------------------
; include instance specific register definitions
;-----------------------------------------------

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
;-------------------------------------------------------------------
;  Declare the functions global for both assembler and C compiler.
;
;  Note that there are two names for each API. First name is
;  assembler reference. Name with underscore is name refence for
;  C compiler.  Calling function in C source code does not require
;  the underscore.
;-------------------------------------------------------------------

export    USB_EP1_ISR
export   _USB_EP1_ISR
export    USB_EP2_ISR
export   _USB_EP2_ISR
export    USB_EP3_ISR
export   _USB_EP3_ISR
export    USB_EP4_ISR
export   _USB_EP4_ISR
export    USB_RESET_ISR
export   _USB_RESET_ISR
export    USB_SOF_ISR
export   _USB_SOF_ISR
export    USB_WAKEUP_ISR
export   _USB_WAKEUP_ISR


;@PSoC_UserCode_INIT@ (Do not change this line.)
;---------------------------------------------------
; Insert your custom declarations below this banner
;---------------------------------------------------

;------------------------
; Includes
;------------------------

	
;------------------------
;  Constant Definitions
;------------------------


;------------------------
; Variable Allocation
;------------------------
AREA InterruptRAM (RAM, REL, CON)
_SOF_Flag::	BLK 1

;---------------------------------------------------
; Insert your custom declarations above this banner
;---------------------------------------------------
;@PSoC_UserCode_END@ (Do not change this line.)

area UserModules(rom,rel)


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USB_EP1_ISR
;
;  DESCRIPTION:    Handle the Endpoint 1 event by updating the data toggle
;                  and setting the endpoint state to EVENT_PENDING.  The SIE
;                  automatically set the mode to NAK both IN and out transfers
;-----------------------------------------------------------------------------
 USB_EP1_ISR:
_USB_EP1_ISR:
   ;@PSoC_UserCode_BODY_EP1@ (Do not change this line.)
   ;---------------------------------------------------
   ; Insert your custom code below this banner
   ;---------------------------------------------------
   ;   NOTE: interrupt service routines must preserve
   ;   the values of the A and X CPU registers.
STD_EP1:    EQU     1   ; Set this equate to 0 to remove the standard
                        ; endpoint handling code
   ;---------------------------------------------------
   ; Insert your custom code above this banner
   ;---------------------------------------------------
   ;@PSoC_UserCode_END@ (Do not change this line.)

IF  STD_EP1
    PUSH A
    XOR     [USB_EPDataToggle], 2 ; Update EP1 data toggle
    M8C_SetBank1	; _EP1MODE is in Bank 1
    MOV     A, REG[USB_EP1MODE]        ; Get the mode
	M8C_SetBank0
    MOV     [USB_EndpointAPIStatus+1], EVENT_PENDING ; For the API
    POP A
    RETI
ENDIF
    reti
;-----------------------------------------------------------------------------
;  FUNCTION NAME: USB_EP2_ISR
;
;  DESCRIPTION:    Handle the Endpoint 2 event by updating the data toggle
;                  and setting the endpoint state to EVENT_PENDING.  The SIE
;                  automatically set the mode to NAK both IN and out transfers
;-----------------------------------------------------------------------------
 USB_EP2_ISR:
_USB_EP2_ISR:

   ;@PSoC_UserCode_BODY_EP2@ (Do not change this line.)
   ;---------------------------------------------------
   ; Insert your custom code below this banner
   ;---------------------------------------------------
   ;   NOTE: interrupt service routines must preserve
   ;   the values of the A and X CPU registers.
STD_EP2:    EQU     1   ; Set this equate to 0 to remove the standard
                        ; endpoint handling code
   ;---------------------------------------------------
   ; Insert your custom code above this banner
   ;---------------------------------------------------
   ;@PSoC_UserCode_END@ (Do not change this line.)
   

IF  STD_EP2
    PUSH A
    XOR     [USB_EPDataToggle], 4 ; Update EP2 data toggle
    M8C_SetBank1
    MOV     A, REG[USB_EP2MODE]        ; Get the mode
    M8C_SetBank0
    MOV     [USB_EndpointAPIStatus + 2], EVENT_PENDING ; For the API
    POP A
    RETI
ENDIF
    reti

;-----------------------------------------------------------------------------
;  FUNCTION NAME: USB_EP3_ISR
;
;  DESCRIPTION:    Handle the Endpoint 3 event by updating the data toggle
;                  and setting the endpoint state to EVENT_PENDING.  The SIE
;                  automatically set the mode to NAK both IN and out transfers
;-----------------------------------------------------------------------------
 USB_EP3_ISR:
_USB_EP3_ISR:


   ;@PSoC_UserCode_BODY_EP3@ (Do not change this line.)
   ;---------------------------------------------------
   ; Insert your custom code below this banner
   ;---------------------------------------------------
   ;   NOTE: interrupt service routines must preserve
   ;   the values of the A and X CPU registers.

STD_EP3:    EQU     1   ; Set this equate to 0 to remove the standard
                        ; endpoint handling code
   ;---------------------------------------------------
   ; Insert your custom code above this banner
   ;---------------------------------------------------
   ;@PSoC_UserCode_END@ (Do not change this line.)

IF  STD_EP3
    PUSH A
    XOR     [USB_EPDataToggle], 8 ; Update EP3 data toggle
    M8C_SetBank1
    MOV     A, REG[USB_EP3MODE]        ; Get the mode
    M8C_SetBank0
    MOV     [USB_EndpointAPIStatus + 3], EVENT_PENDING ; For the API
    POP A
    RETI
ENDIF

   reti

;-----------------------------------------------------------------------------
;  FUNCTION NAME: USB_EP4_ISR
;
;  DESCRIPTION:    Handle the Endpoint 4 event by updating the data toggle
;                  and setting the endpoint state to EVENT_PENDING.  The SIE
;                  automatically set the mode to NAK both IN and out transfers
;-----------------------------------------------------------------------------
 USB_EP4_ISR:
_USB_EP4_ISR:

   ;@PSoC_UserCode_BODY_4@ (Do not change this line.)
   ;---------------------------------------------------
   ; Insert your custom code below this banner
   ;---------------------------------------------------
   ;   NOTE: interrupt service routines must preserve
   ;   the values of the A and X CPU registers.

STD_EP4:    EQU     1   ; Set this equate to 0 to remove the standard
                        ; endpoint handling code
   ;---------------------------------------------------
   ; Insert your custom code above this banner
   ;---------------------------------------------------
   ;@PSoC_UserCode_END@ (Do not change this line.)


IF  STD_EP4
    PUSH A
    XOR     [USB_EPDataToggle], 16 ; Update EP4 data toggle
    M8C_SetBank1
    MOV     A, REG[USB_EP4MODE]        ; Get the mode
    M8C_SetBank0
    MOV     [USB_EndpointAPIStatus + 4], EVENT_PENDING ; For the API
    POP A
    RETI
ENDIF
    reti
;-----------------------------------------------------------------------------
;  FUNCTION NAME: USB_RESET_ISR
;
;  DESCRIPTION:    Handle the USB Bus Reset Interrupt
;-----------------------------------------------------------------------------
 USB_RESET_ISR:
_USB_RESET_ISR:
;   mov     [USB_Configuration], 0
;   mov     [USB_DeviceStatus], 0
;   mov     [USB_InterfaceSetting], 0
;   mov     [USB_EndpointStatus], 0
;   mov     [USB_TransferType], 0
;   mov     [USB_fDataPending], 0
;   mov     reg[USB_EP0MODE], USB_MODE_STALL_IN_OUT ; ACK Setup/Stall IN/OUT
;   mov     reg[USB_EP1MODE], 0
;   mov     reg[USB_EP2MODE], 0
;   mov     reg[USB_EP3MODE], 0
;   mov     reg[USB_EP4MODE], 0
;   mov     X, USB_MAX_EP_NUMBER       ; Set up loop to clear all of the endpoint data items
;.loop:
;   mov     [X + USB_EPDataToggle], 0  ; Or in the toggle
;   dec     X                          ; Are we done?
;   jnz     .loop                      ; Jump to do another endpoint    

;   mov     reg[USB_ADDR], USB_ADDR_ENABLE ; Enable Address 0

   ;@PSoC_UserCode_BODY_USB_RESET@ (Do not change this line.)
   ;---------------------------------------------------
   ; Insert your custom code below this banner
   ;---------------------------------------------------
   ;   NOTE: interrupt service routines must preserve
   ;   the values of the A and X CPU registers.

STD_USB_RESET:    EQU     1 ; Set this equate to 0 to remove the standard
                            ; USB reset handling code below

   ;---------------------------------------------------
   ; Insert your custom code above this banner
   ;---------------------------------------------------
   ;@PSoC_UserCode_END@ (Do not change this line.)

IF  STD_USB_RESET
	push 	A
	push    X
    ISR_PRESERVE_PAGE_POINTERS
	M8C_SetBank1
	mov		A, reg[USB_USB_CR1]		            ; Get the RegEnable
	M8C_SetBank0
	and 	A, 0x03                          ; mask off the RegEnable and EnableLock bits
	mov		X, A                             ; save value in X
    MOV     A, [USB_bCurrentDevice]     ; Select the current device
    RAM_RESTORE_NATIVE_PAGING
	LCALL   _USB_Start     ; Restart USB
    ISR_RESTORE_PAGE_POINTERS
    POP X
    POP A
		
ENDIF

	RETI
 USB_SOF_ISR:
_USB_SOF_ISR:

   ;@PSoC_UserCode_BODY_6@ (Do not change this line.)
   ;---------------------------------------------------
   ; Insert your custom code below this banner
   ;---------------------------------------------------
   ;   NOTE: interrupt service routines must preserve
   ;   the values of the A and X CPU registers.

	INC		[_SOF_Flag]
	
   ;---------------------------------------------------
   ; Insert your custom code above this banner
   ;---------------------------------------------------
   ;@PSoC_UserCode_END@ (Do not change this line.)

   reti

 USB_WAKEUP_ISR:
_USB_WAKEUP_ISR:

   ;@PSoC_UserCode_BODY_7@ (Do not change this line.)
   ;---------------------------------------------------
   ; Insert your custom code below this banner
   ;---------------------------------------------------
   ;   NOTE: interrupt service routines must preserve
   ;   the values of the A and X CPU registers.

   ;---------------------------------------------------
   ; Insert your custom code above this banner
   ;---------------------------------------------------
   ;@PSoC_UserCode_END@ (Do not change this line.)

   reti

; End of File USB.asm
